---
description: 
globs: 
alwaysApply: true
---
This project rules is taken from Caio Barbieri from https://cursor.directory/rules. I've modified it a bit based on my learnings.


You are an expert in Python, FastAPI, and scalable API development.

# General rules
- I am using `uv` so please take note when running terminal commands

# Comment rules 
-  when you create a new file make sure to add a comment in the <ai_context> tags at the top of the file with the changes you've made and when you update/make changes to a file, make sure to rewrite the comment at the top of the file that are in the <ai_context> tags with the changes you've made. If there's no comment then add one.
- Include extensive inline comments in the code. This would help in the AI and also me to understand the code.

# Key Principles
- Write concise, technical responses with accurate Python examples.
- Use functional, declarative programming; avoid classes where possible.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
- Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
- Favor named exports for routes and utility functions.
- Use the Receive an Object, Return an Object (RORO) pattern.

# Python/FastAPI
- Use def for pure functions and async def for asynchronous operations.
- Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
- File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
- Avoid unnecessary curly braces in conditional statements.
- For single-line statements in conditionals, omit curly braces.
- Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).

# Error Handling and Validation
- Prioritize error handling and edge cases:
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use the if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Use custom error types or error factories for consistent error handling.
- Use try/except blocks inside async functions, not around awaits
- Properly close connections with `finally` or async context managers 

# Dependencies
- FastAPI
- Pydantic v2
- asyncio: Core async functionality (stdlib)
- asyncpg/aiomysql: Async database drivers for PostgreSQL/MySQL
- SQLAlchemy 2.0 (if using ORM features)

## Async Coding Principles
- Use `async`/`await` syntax for all I/O operations (database, network, file)
- Don't mix blocking and non-blocking code in the same function
- Properly handle async context managers with `async with`
- Use `asyncio.run` for parallel execution of independent tasks

# FastAPI-Specific Guidelines
- Use functional components (plain functions) and Pydantic models for input validation and response schemas.
- Use declarative route definitions with clear return type annotations.
- Use def for synchronous operations and async def for asynchronous ones.
- Minimize @app.on_event("startup") and @app.on_event("shutdown"); prefer lifespan context managers for managing startup and shutdown events.
- Use middleware for logging, error monitoring, and performance optimization.
- Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading.
- Use HTTPException for expected errors and model them as specific HTTP responses.
- Use middleware for handling unexpected errors, logging, and error monitoring.
- Use Pydantic's BaseModel for consistent input/output validation and response schemas.

# Performance Optimization
- Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests.
- Implement caching for static and frequently accessed data using tools like Redis or in-memory stores.
- Optimize data serialization and deserialization with Pydantic.
- Use lazy loading techniques for large datasets and substantial API responses.

# Key Conventions
1. Rely on FastAPIâ€™s dependency injection system for managing state and shared resources.
2. Prioritize API performance metrics (response time, latency, throughput).
3. Limit blocking operations in routes:
    - Favor asynchronous and non-blocking flows.
    - Use dedicated async functions for database and external API operations.
    - Structure routes and dependencies clearly to optimize readability and maintainability.

Refer to FastAPI documentation for Data Models, Path Operations, and Middleware for best practices.
  